#!/data/data/com.termux/files/usr/bin/bash

#!/bin/sh

# Define URLs and target paths
URL_BUSYBOX="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/busybox"
URL_MKFS_FAT="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/mkfs.fat"
URL_MKFS_NTFS="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/mkfs.ntfs"
URL_MOUNT_NTFS="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/mount.ntfs"
URL_PARTED="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/parted"
URL_SGDISK="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/sgdisk"
URL_METADATA="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/metadata.img"

TARGET_BUSYBOX="$(pwd)/busybox"
TARGET_MKFS_FAT="$(pwd)/mkfs.fat"
TARGET_MKFS_NTFS="$(pwd)/mkfs.ntfs"
TARGET_MOUNT_NTFS="$(pwd)/mount.ntfs"
TARGET_PARTED="$(pwd)/parted"
TARGET_SGDISK="$(pwd)/sgdisk"
TARGET_METADATA="$(pwd)/metadata.img"


# Check the device codename using getprop
DEVICE_CODENAME=$(getprop ro.product.device)

if [ "$DEVICE_CODENAME" = "nabu" ]; then
    echo "55555555555555555555555555555555555555555555555555555555"
    echo "WinInstaller for Xiaomi Pad 5 ($DEVICE_CODENAME)"
    echo "By ArKT, Telegram - '@ArKT_7', Github - 'ArKT-7'"
elif [ "$DEVICE_CODENAME" = "dm3q" ]; then
    echo ""
    echo "WinInstaller for Samsung S23 Ultra ($DEVICE_CODENAME)"
    echo "By ArKT, Telegram - '@ArKT_7', Github - 'ArKT-7'"
else
    echo ""
    echo "This device is not supported yet. Please contact the developer on Telegram @ArKT_7"
    echo "$DEVICE_CODENAME"
    echo ""
    exit 1
fi

echo ""
# Function to download and set permissions
download_and_set_permissions() {
    local url=$1
    local dest_file=$2
    echo "Downloading $(basename "$url")..."
    curl -s -L -o "$dest_file" "$url"
    
    if [ $? -ne 0 ]; then
        echo "Failed to download $(basename "$url"). Exiting."
        echo ""
        echo "Please re-boot/Restart your device and Re-run this Code."
        exit 1
    fi

    chmod 777 "$dest_file"
    echo "Permissions set for $(basename "$dest_file")"
}

# Download and set permissions for binaries
download_and_set_permissions "$URL_BUSYBOX" "$TARGET_BUSYBOX"

# Delete all files in $(pwd) except busybox
$(pwd)/busybox find $(pwd) -mindepth 1 ! -name 'busybox' -exec $(pwd)/busybox rm -rf {} +

download_and_set_permissions "$URL_MKFS_FAT" "$TARGET_MKFS_FAT"
download_and_set_permissions "$URL_MKFS_NTFS" "$TARGET_MKFS_NTFS"
download_and_set_permissions "$URL_MOUNT_NTFS" "$TARGET_MOUNT_NTFS"
download_and_set_permissions "$URL_PARTED" "$TARGET_PARTED"
download_and_set_permissions "$URL_SGDISK" "$TARGET_SGDISK"
download_and_set_permissions "$URL_METADATA" "$TARGET_METADATA"
echo ""
echo ""
echo "All binaries have been downloaded and permissions set."
echo ""
echo ""


win=/dev/block/sda32
esp=/dev/block/sda33

removeparts(){ for i in 33 32 31; do $(pwd)/parted -s /dev/block/sda rm $i 2>/dev/null; done }

formatwinesp(){
$(pwd)/mkfs.fat -F32 -s1 $esp -n ESPNABU
$(pwd)/mkfs.ntfs -f $win -L WINNABU
}

formatandroid(){
$(pwd)/busybox dd if=$(pwd)/metadata.img of=/dev/block/sda19
}

blocksize=$($(pwd)/busybox blockdev --getsize64 /dev/block/sda)
if [[ $blocksize =~ ^125[0-9]{9}$ ]]; then max=125586
elif [[ $blocksize =~ ^253[0-9]{9}$ ]]; then max=253446
elif [[ $blocksize =~ ^509[0-9]{9}$ ]]; then max=509465
else echo "is this nabu?"; exit 1
fi


# Prompt the user for the Windows partition size
echo "Enter the size for the Windows partition in GB:"
read -r size_win
if ! [[ $size_win =~ ^[0-9]+$ ]]; then
echo "Invalid size. Please enter a number."
continue
fi
if [[ -n $size_win ]]; then
winmax=$(echo "($max - 10872 - 400 - 100)/1000" | bc)
echo "min size is 20, max size is less then $winmax"
! [[ -z $2 && $size_win =~ ^[0-9]{1,3}(\.[0-9])?$ && $(echo "20 < $size_win && $size_win < $winmax" | bc) == 1 ]] && echo "invalid argument!" && exit 1
echo ""$(echo "scale=2; $size_win*1000/1024" | bc)"GiB of space will be given to the main windows parition"
userdataend=$(echo "$max - $size_win*1000 - 400" | bc)
echo "userdata will get "$(echo "scale=2;($userdataend-10872)/1024" | bc)"GiB of space"
echo -n "does that sound good (y/n)? "
read yn
[[ $yn =~ ^[Yy].*$ ]] || { echo "rethink things carefully and, eventually, you'll come to a conclusion.";exit 1; }
fi
winend=$((max-400))"MB"
removeparts
$(pwd)/sgdisk --resize-table 64 /dev/block/sda
$(pwd)/parted -s /dev/block/sda \
  mkpart userdata ext4 10872MB $userdataend"MB" \
  mkpart win ntfs $userdataend"MB" $winend \
  mkpart esp fat32 $winend 100% \
  set 33 esp on
sync
formatwinesp
formatandroid
echo "done!"
echo "Repartitioning completed."
echo ""
echo "NOW YOUR DEVICE BOOT TO RECOVERY. THEN WIPE DATA THERE,"
echo "then reboot. AND COMPLETE SETUP EVERYTHING"
echo "INSTALL MAGISK AND THEN CONTINUE TO RE-RUN EVERYTHING"
echo ""
echo "Repartitioning done! Press any key to reboot..."
read -n 1 -s key  # Wait for a key press
echo "Waiting for 5 seconds before rebooting..."
sleep 5
reboot
