#!/data/data/com.termux/files/usr/bin/bash

# Define URLs and target paths
URL_BUSYBOX="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/busybox"
URL_MKFS_FAT="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/mkfs.fat"
URL_MKFS_NTFS="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/mkfs.ntfs"
URL_MOUNT_NTFS="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/mount.ntfs"

TARGET_BUSYBOX="$(pwd)/busybox"
TARGET_MKFS_FAT="$(pwd)/mkfs.fat"
TARGET_MKFS_NTFS="$(pwd)/mkfs.ntfs"
TARGET_MOUNT_NTFS="$(pwd)/mount.ntfs"

# Check the device codename using getprop
DEVICE_CODENAME=$(getprop ro.product.device)

if [ "$DEVICE_CODENAME" = "nabu" ]; then
    echo "lollllllllllllllllllllllllllllllll"
    echo "WinInstaller for Xiaomi Pad 5 ($DEVICE_CODENAME)"
    echo "By ArKT, Telegram - '@ArKT_7', Github - 'ArKT-7'"
elif [ "$DEVICE_CODENAME" = "dm3q" ]; then
    echo ""
    echo "WinInstaller for Samsung S23 Ultra ($DEVICE_CODENAME)"
    echo "By ArKT, Telegram - '@ArKT_7', Github - 'ArKT-7'"
else
    echo ""
    echo "This device is not supported yet. Please contact the developer on Telegram @ArKT_7"
    echo "$DEVICE_CODENAME"
    echo ""
    exit 1
fi

echo ""
# Function to download and set permissions
download_and_set_permissions() {
    local url=$1
    local dest_file=$2
    echo "Downloading $(basename "$url")..."
    curl -s -L -o "$dest_file" "$url"
    
    if [ $? -ne 0 ]; then
        echo "Failed to download $(basename "$url"). Exiting."
        exit 1
    fi

    chmod 777 "$dest_file"
    echo "Permissions set for $(basename "$dest_file")"
}

# Download and set permissions for binaries
download_and_set_permissions "$URL_BUSYBOX" "$TARGET_BUSYBOX"
$(pwd)/busybox find $(pwd) -mindepth 1 ! -name 'busybox' -exec $(pwd)/busybox rm -rf {} +

download_and_set_permissions "$URL_MKFS_FAT" "$TARGET_MKFS_FAT"
download_and_set_permissions "$URL_MKFS_NTFS" "$TARGET_MKFS_NTFS"
download_and_set_permissions "$URL_MOUNT_NTFS" "$TARGET_MOUNT_NTFS"

echo ""
echo "All binaries have been downloaded and permissions set."
echo ""

# Function to convert bytes to gigabytes
bytes_to_gb() {
    echo "scale=2; $1 / (1024 * 1024 * 1024)" | $(pwd)/busybox bc
}

# Function to check if a partition exists
partition_exists() {
    [ -e "$1" ]
}

# Define partition paths
part_win="/dev/block/by-name/win"
part_esp="/dev/block/by-name/esp"
part_userdata="/dev/block/by-name/userdata"

# Get partition number for userdata
userdata_partition_number=$(echo "$part_userdata" | $(pwd)/busybox sed 's/.*\(p[0-9]*\)/\1/')
echo "Size of Userdata Partition: $size_userdata_gb GB (Partition No: $userdata_partition_number)"
echo ""
# Check if partitions exist
if ! partition_exists "$part_win"; then
    echo "Windows Partition does not exist."
    exit 1
fi

if ! partition_exists "$part_esp"; then
    echo "ESP Partition does not exist."
    exit 1
fi

if ! partition_exists "$part_userdata"; then
    echo "Userdata Partition does not exist."
    exit 1
fi

# Get sizes in bytes
size_win=$($(pwd)/busybox blockdev --getsize64 "$part_win")
size_esp=$($(pwd)/busybox blockdev --getsize64 "$part_esp")
size_userdata=$($(pwd)/busybox blockdev --getsize64 "$part_userdata")

# Convert sizes
size_win_gb=$(bytes_to_gb $size_win)
size_esp_mb=$(bytes_to_gb $size_esp)
size_userdata_gb=$(bytes_to_gb $size_userdata)


# Print sizes and partition number
echo ""
echo "Size of Windows Partition: $size_win_gb GB"
echo "Size of ESP Partition: $size_esp_mb MB"


# Check partition sizes
if [ $(echo "$size_esp_mb < 350" | $(pwd)/busybox bc) -eq 1 ]; then
    echo "ESP partition is less than 350 MB."
    exit 1
fi

if [ $(echo "$size_win_gb < 20" | $(pwd)/busybox bc) -eq 1 ]; then
    echo "Windows partition is less than 20 GB."
    exit 1
fi

# Continue with other operations if checks pass
echo "Partition sizes are sufficient. Proceeding with the rest of the script..."
