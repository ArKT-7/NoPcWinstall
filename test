#!/data/data/com.termux/files/usr/bin/bash

#!/bin/sh

# Define URLs and target paths
URL_BUSYBOX="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/busybox"
URL_MKFS_FAT="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/mkfs.fat"
URL_MKFS_NTFS="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/mkfs.ntfs"
URL_MOUNT_NTFS="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/mount.ntfs"
URL_PARTED="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/parted"
URL_SGDISK="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/sgdisk"

TARGET_BUSYBOX="$(pwd)/busybox"
TARGET_MKFS_FAT="$(pwd)/mkfs.fat"
TARGET_MKFS_NTFS="$(pwd)/mkfs.ntfs"
TARGET_MOUNT_NTFS="$(pwd)/mount.ntfs"
TARGET_PARTED="$(pwd)/parted"
TARGET_SGDISK="$(pwd)/sgdisk"


# Check the device codename using getprop
DEVICE_CODENAME=$(getprop ro.product.device)

if [ "$DEVICE_CODENAME" = "nabu" ]; then
    echo "2333333333333333333333333333333333"
    echo "WinInstaller for Xiaomi Pad 5 ($DEVICE_CODENAME)"
    echo "By ArKT, Telegram - '@ArKT_7', Github - 'ArKT-7'"
elif [ "$DEVICE_CODENAME" = "dm3q" ]; then
    echo ""
    echo "WinInstaller for Samsung S23 Ultra ($DEVICE_CODENAME)"
    echo "By ArKT, Telegram - '@ArKT_7', Github - 'ArKT-7'"
else
    echo ""
    echo "This device is not supported yet. Please contact the developer on Telegram @ArKT_7"
    echo "$DEVICE_CODENAME"
    echo ""
    exit 1
fi

echo ""
# Function to download and set permissions
download_and_set_permissions() {
    local url=$1
    local dest_file=$2
    echo "Downloading $(basename "$url")..."
    curl -s -L -o "$dest_file" "$url"
    
    if [ $? -ne 0 ]; then
        echo "Failed to download $(basename "$url"). Exiting."
        echo ""
        echo "Please re-boot/Restart your device and Re-run this Code."
        exit 1
    fi

    chmod 777 "$dest_file"
    echo "Permissions set for $(basename "$dest_file")"
}

# Download and set permissions for binaries
download_and_set_permissions "$URL_BUSYBOX" "$TARGET_BUSYBOX"

# Delete all files in $(pwd) except busybox
$(pwd)/busybox find $(pwd) -mindepth 1 ! -name 'busybox' -exec $(pwd)/busybox rm -rf {} +

download_and_set_permissions "$URL_MKFS_FAT" "$TARGET_MKFS_FAT"
download_and_set_permissions "$URL_MKFS_NTFS" "$TARGET_MKFS_NTFS"
download_and_set_permissions "$URL_MOUNT_NTFS" "$TARGET_MOUNT_NTFS"
download_and_set_permissions "$URL_PARTED" "$TARGET_PARTED"
download_and_set_permissions "$URL_SGDISK" "$TARGET_SGDISK"
echo ""
echo ""
echo "All binaries have been downloaded and permissions set."
echo ""
echo ""


#!/sbin/bash
win=/dev/block/sda32
esp=/dev/block/sda33
removeparts(){ for i in 33 32 31; do $(pwd)/parted -s /dev/block/sda rm $i 2>/dev/null; done }

formatwinesp(){
$(pwd)/mkfs.fat -F32 -s1 $esp -n ESPNABU
$(pwd)/mkfs.ntfs -f $win -L WINNABU
}


[ "$ignoreweirdness" != true ] && for i in 1 2 3 4; do test -e /dev/block/by-name/bk0$i || {
    echo "this script will NOT work with weird partition layouts! please restore the partition table by flashing gpt_both0 in fastboot!"
    exit 1
}; done


blocksize=$($(pwd)/busybox blockdev --getsize64 /dev/block/sda)
if [[ $blocksize =~ ^125[0-9]{9}$ ]]; then max=125586
elif [[ $blocksize =~ ^253[0-9]{9}$ ]]; then max=253446
elif [[ $blocksize =~ ^509[0-9]{9}$ ]]; then max=509465
else echo "is this nabu?"; exit 1
fi

if [ "$ignoreweirdness" != true ]; then
    weirdparts=$(find /dev/block -regextype posix-extended -type b -regex '.*/sda(3[4-9]|[4-9][0-9])$')
    if [ -n "$weirdparts" ]; then
        echo -n "in order to use this script, your partition table has to be restored to the stock variant. ALL DATA WILL BE LOST. continue (y/n)? "
        read yn
        [[ $yn =~ ^[Yy].*$ ]] || {
            echo "can't proceed without restoring the table."
            exit 1
        }
        echo "restoring the stock partition layout now"
        for i in $weirdparts; do
            f="${i:14}"
            parted -s /dev/block/sda rm $f 2>/dev/null
        done
        restore
        exit 0
    fi
fi


if [[ -n $1 ]]; then
winmax=$(echo "($max - 10872 - 400 - 100)/1000" | bc)
echo "min size is 20, max size is less then $winmax"
! [[ -z $2 && $1 =~ ^[0-9]{1,3}(\.[0-9])?$ && $(echo "20 < $1 && $1 < $winmax" | bc) == 1 ]] && echo "invalid argument!" && exit 1
echo ""$(echo "scale=2; $1*1000/1024" | bc)"GiB of space will be given to the main windows parition"
userdataend=$(echo "$max - $1*1000 - 400" | bc)
echo "userdata will get "$(echo "scale=2;($userdataend-10872)/1024" | bc)"GiB of space"
echo -n "does that sound good (y/n)? "
read yn
[[ $yn =~ ^[Yy].*$ ]] || { echo "rethink things carefully and, eventually, you'll come to a conclusion.";exit 1; }
fi
winend=$((max-400))"MB"
removeparts
$(pwd)/sgdisk --resize-table 64 /dev/block/sda
$(pwd)/parted -s /dev/block/sda \
  mkpart userdata ext4 10872MB $userdataend"MB" \
  mkpart win ntfs $userdataend"MB" $winend \
  mkpart esp fat32 $winend 100% \
  set 33 esp on
sync
formatwinesp
echo "done!"
