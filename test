#!/data/data/com.termux/files/usr/bin/bash

#!/bin/sh

# Define URLs and target paths
URL_BUSYBOX="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/busybox"
URL_MKFS_FAT="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/mkfs.fat"
URL_MKFS_NTFS="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/mkfs.ntfs"
URL_MOUNT_NTFS="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/mount.ntfs"
URL_PARTED="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/parted"
URL_SGDISK="https://raw.githubusercontent.com/arkt-7/NoPcWinstall/main/bin/sgdisk"

TARGET_BUSYBOX="$(pwd)/busybox"
TARGET_MKFS_FAT="$(pwd)/mkfs.fat"
TARGET_MKFS_NTFS="$(pwd)/mkfs.ntfs"
TARGET_MOUNT_NTFS="$(pwd)/mount.ntfs"
TARGET_PARTED="$(pwd)/parted"
TARGET_SGDISK="$(pwd)/sgdisk"

# Check the device codename using getprop
DEVICE_CODENAME=$(getprop ro.product.device)

if [ "$DEVICE_CODENAME" = "nabu" ]; then
    echo "xxxxxxxxxxxxxxxxxxxxxx"
    echo "WinInstaller for Xiaomi Pad 5 ($DEVICE_CODENAME)"
    echo "By ArKT, Telegram - '@ArKT_7', Github - 'ArKT-7'"
elif [ "$DEVICE_CODENAME" = "dm3q" ]; then
    echo ""
    echo "WinInstaller for Samsung S23 Ultra ($DEVICE_CODENAME)"
    echo "By ArKT, Telegram - '@ArKT_7', Github - 'ArKT-7'"
else
    echo ""
    echo "This device is not supported yet. Please contact the developer on Telegram @ArKT_7"
    echo "$DEVICE_CODENAME"
    echo ""
    exit 1
fi

echo ""
# Function to download and set permissions
download_and_set_permissions() {
    local url=$1
    local dest_file=$2
    echo "Downloading $(basename "$url")..."
    curl -s -L -o "$dest_file" "$url"
    
    if [ $? -ne 0 ]; then
        echo "Failed to download $(basename "$url"). Exiting."
        echo ""
        echo "Please re-boot/Restart your device and Re-run this Code."
        exit 1
    fi

    chmod 777 "$dest_file"
    echo "Permissions set for $(basename "$dest_file")"
}

# Download and set permissions for binaries
download_and_set_permissions "$URL_BUSYBOX" "$TARGET_BUSYBOX"

# Delete all files in $(pwd) except busybox
$(pwd)/busybox find $(pwd) -mindepth 1 ! -name 'busybox' -exec $(pwd)/busybox rm -rf {} +

download_and_set_permissions "$URL_MKFS_FAT" "$TARGET_MKFS_FAT"
download_and_set_permissions "$URL_MKFS_NTFS" "$TARGET_MKFS_NTFS"
download_and_set_permissions "$URL_MOUNT_NTFS" "$TARGET_MOUNT_NTFS"
download_and_set_permissions "$URL_PARTED" "$TARGET_PARTED"
download_and_set_permissions "$URL_SGDISK" "$TARGET_SGDISK"
echo ""
echo ""
echo "All binaries have been downloaded and permissions set."
echo ""
echo ""

# Functions to convert bytes
bytes_to_gb() {
    echo "scale=2; $1 / (1024 * 1024 * 1024)" | bc
}

bytes_to_mb() {
    echo "scale=2; $1 / (1024 * 1024)" | bc
}

# Function to check if a partition exists
partition_exists() {
    [ -e "$1" ]
}

# Define partition paths
part_win="/dev/block/by-name/win"
part_esp="/dev/block/by-name/esp"
part_userdata="/dev/block/by-name/userdata"

# Function to remove partitions
removeparts() {
    for i in 33 32 31; do
        $(pwd)/parted -s /dev/block/sda rm $i 2>/dev/null
    done
}

# Function to format Windows and ESP partitions
formatwinesp() {
    $(pwd)/mkfs.fat -F32 -s1 $esp -n ESPNABU
    $(pwd)/mkfs.ntfs -f $win -L WINNABU
}

# Function to format data partitions
formatdata() {
    $(pwd)/busybox make_f2fs -f -g android /dev/block/sda31
    $(pwd)/busybox mke2fs -t ext4 -F /dev/block/sda19
}

# Function to handle repartitioning
repartition_windows() {
    echo "Do you want to proceed with partitioning? (y/n)"
    read -r first_confirmation
    if [[ "$first_confirmation" == "y" || "$first_confirmation" == "yes" ]]; then
        echo "Warning: All data will be erased. Enter the size for the Windows partition in GB:"
        read -r size_win
        if ! [[ $size_win =~ ^[0-9]+$ ]]; then
            echo "Invalid size. Please enter a number."
            exit 1
        fi

        # Logic to determine maximum size
        blocksize=$($(pwd)/busybox blockdev --getsize64 /dev/block/sda)
        if [[ $blocksize =~ ^125[0-9]{9}$ ]]; then max=125586
        elif [[ $blocksize =~ ^253[0-9]{9}$ ]]; then max=253446
        elif [[ $blocksize =~ ^509[0-9]{9}$ ]]; then max=509465
        else echo "is this nabu?"; exit 
        echo "$max"
        fi
        
        userdataend=$(echo "$max - $size_win * 1000 - 400" | bc)

        # Create partitions
        removeparts
        $(pwd)/sgdisk --resize-table 64 /dev/block/sda
        $(pwd)/busybox parted -s /dev/block/sda \
            mkpart userdata ext4 10872MB $userdataend"MB" \
            mkpart win ntfs $userdataend"MB" $(echo "$max - 400" | bc)"MB" \
            mkpart esp fat32 $(echo "$max - 400" | bc)"MB" 100% \
            set 33 esp on
        sync
        formatdata
        formatwinesp
        echo "Repartitioning done!"
        exit
    else
        echo "Repartitioning cancelled."
        exit
    fi
}

# Check for existing partitions
if ! partition_exists "$part_win" || ! partition_exists "$part_esp"; then
    echo "Need to do partitioning for Windows"
    repartition_windows
fi

# Function to convert bytes to gigabytes and megabytes
bytes_to_gb() {
    echo "scale=2; $1 / (1024 * 1024 * 1024)" | bc
}

bytes_to_mb() {
    echo "scale=2; $1 / (1024 * 1024)" | bc
}

# Function to check if a partition exists
partition_exists() {
    [ -e "$1" ]
}

# Define partition paths
part_win="/dev/block/by-name/win"
part_esp="/dev/block/by-name/esp"
part_userdata="/dev/block/by-name/userdata"



# Check if partitions exist and their sizes
if ! partition_exists "$part_win"; then
    echo "Windows Partition does not exist."
    # Print sizes
    echo ""
    size_userdata=$($(pwd)/busybox blockdev --getsize64 "$part_userdata")
    size_userdata_gb=$(bytes_to_gb $size_userdata)
    echo "Current Size of Windows Partition: NOTHING LOL"
    echo "Current Size of ESP Partition: NOTHING LOL"
    echo ""
    echo "Current Size of Android partition: $size_userdata_gb GB"
    echo ""
    echo "need to do partitioning for windows"
    repartition_windows
fi

if ! partition_exists "$part_esp"; then
    echo "ESP Partition does not exist."
     # Print sizes
    echo ""
    size_userdata=$($(pwd)/busybox blockdev --getsize64 "$part_userdata")
    size_userdata_gb=$(bytes_to_gb $size_userdata)
    echo "Current Size of Windows Partition: NOTHING LOL"
    echo "Current Size of ESP Partition: NOTHING LOL"
    echo ""
    echo "Current Size of Android partition: $size_userdata_gb GB"
    echo ""
    echo "need to do partitioning for windows"
    repartition_windows
fi


# Get sizes in bytes
size_win=$($(pwd)/busybox blockdev --getsize64 "$part_win")
size_esp=$($(pwd)/busybox blockdev --getsize64 "$part_esp")
size_userdata=$($(pwd)/busybox blockdev --getsize64 "$part_userdata")

# Convert sizes
size_win_gb=$(bytes_to_gb $size_win)
size_esp_mb=$(bytes_to_mb $size_esp)
size_userdata_gb=$(bytes_to_gb $size_userdata)

# Print sizes
echo ""
echo "Size of Windows Partition: $size_win_gb GB"
echo "Size of ESP Partition: $size_esp_mb MB"
echo "Size of Android partition: $size_userdata_gb GB"
echo ""

# Check partition sizes
if [ $(echo "$size_esp_mb < 350" | bc) -eq 1 ]; then
    echo "ESP partition is less than 350 MB."
    re_part
fi

if [ $(echo "$size_win_gb < 20" | bc) -eq 1 ]; then
    echo "Windows partition is less than 20 GB."
    re_part
fi

# Continue with other operations if checks pass
echo "Partition sizes are sufficient. 
echo ""
echo "ESP and Windows partitions already exist. \nDo you want to re-partition(r) or continue(c) with the existing partitions?"
    read -r confirmation
    if [[ "$confirmation" == "r" || "$confirmation" == "repart" ]]; then
        echo "OK, repartition will be done now."
        repartition_windows
    else
        echo "Skipping repartitioning windows"
        echo "Windows partition will be format and will install in same partition"
    fi
echo ""
Proceeding with the rest of the Things..."
